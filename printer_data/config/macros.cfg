[gcode_macro G29]				
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                      # Full home (XYZ)
    {% endif %}
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z   
  BED_MESH_CALIBRATE
  G28 Z

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    STATUS_HOMING
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                      # Full home (XYZ)
    {% endif %}

    M400

    CLEAR_PAUSE

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S150                                           # Turns on the PT-fan
    #  Uncomment if you have a Nevermore.
    #SET_PIN PIN=!PC13 VALUE=1                      # Turns on the nevermore
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 2 min"                # Displays info
    G4 P120000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  STATUS_LEVELING
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  SMART_PARK

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  STATUS_HEATING
  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for bed mesh (2 of 2)
  STATUS_MESHING
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info

  BED_MESH_CALIBRATE ADAPTIVE=1                # Starts bed mesh

  SMART_PARK

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_CLEANING
  LINE_PURGE
  STATUS_PRINTING

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  STATUS_COOLING
  M400 ; wait for buffer to clear
  G92 E0 ; zero the extruder
  G1 E-4.0 F3600 ; retract
  G91 ; relative positioning
  G0 Z{z_safe} F3600 ; move nozzle up
  M104 S0 ; turn off hotend
  M140 S0 ; turn off bed
  M106 S0 ; turn off fan
  M107 ; turn off part cooling fan
  G90 ; absolute positioning
  G1 X{min_x} Y{max_y} F2000 ; move nozzle and present
  M84
  STATUS_PART_READY

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro CLEAN_NOZZLE] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    STATUS_LEVELING
    Z_TILT_ADJUST
    STATUS_HOMING
    G28 Z
    G90 
    G1 X-5 Y30 F7800
    STATUS_HEATING
    M117 Nozzle heating...
    M109 S200
    G91
    G90
    M106 S127
    STATUS_CLEANING
    M117 Clean nozzle
    G1 X-5 Y30 F7800
    G1 Z1 F600
    G1 Y1 F7800
    {% for wipes in range(5) %}
        G1 Y30 X-5
        G1 Y1 X-5
    {% endfor %}
    G1 Z5
    G1 Z1
    {% for wipes in range(5) %}
        G1 Y30 X-3
        G1 Y15 X-4
        G1 Y1 X-5
        G1 Y30 X-5
        G1 Y15 X-4
        G1 Y1 X-3
        G1 Y30 X-3
        G1 Y15 X-4
        G1 Y1 X-5
        G1 Y30 X-5
        G1 Y15 X-4
        G1 Y1 X-3
    {% endfor %}
    G1 Y50 X-5

[gcode_macro CLEAN_NOZZLE_MANUAL] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    STATUS_LEVELING
    Z_TILT_ADJUST
    STATUS_HOMING
    G28 Z
    G90 
    G1 X-5 Y30 F7800
    STATUS_HEATING
    M117 Nozzle heating...
    M109 S200
    G91
    G90
    M106 S127
    STATUS_CLEANING
    M117 Clean nozzle
    G1 X-5 Y30 F7800
    G1 Z1 F600
    G1 Y1 F7800
    {% for wipes in range(5) %}
        G1 Y30 X-5
        G1 Y1 X-5
    {% endfor %}
    G1 Z5
    G1 Z1
    {% for wipes in range(5) %}
        G1 Y30 X-3
        G1 Y15 X-4
        G1 Y1 X-5
        G1 Y30 X-5
        G1 Y15 X-4
        G1 Y1 X-3
        G1 Y30 X-3
        G1 Y15 X-4
        G1 Y1 X-5
        G1 Y30 X-5
        G1 Y15 X-4
        G1 Y1 X-3
    {% endfor %}
    G1 Y50 X-5
    M400
    M117 Clean Finish
    M107 
    G91
    G1 Z10 F600
    G90
    G28 Z
    STATUS_READY
    TURN_OFF_HEATERS
    M84