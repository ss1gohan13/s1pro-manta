[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 200.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 1800     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "STATUS_BUSY"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "STATUS_PRINTING"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "STATUS_READY"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


[gcode_macro G29]				
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28                      # Full home (XYZ)
  {% endif %}
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z   
  BED_MESH_CALIBRATE ADAPTIVE=1
  G28 Z

#####################################################################
#------------------- A better start_print macro --------------------#
#####################################################################

[gcode_macro START_PRINT]
gcode:
    # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                      # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                                                    # Home Z if only Z is unhomed
    {% endif %}
                
    G90                                                          # Use absolute/relative coordinates
    M400                                                         # Wait for current moves to finish
    CLEAR_PAUSE                                                  # Clear any existing pause state

    # Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR                                               # Clears old saved bed mesh (if any)

    # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
    {% if params.BED|int > 90 %}
        M117 Bed: {target_bed}C                                  # Display bed temperature
        STATUS_HEATING                                           # Sets SB-LEDs to heating-mode
        M106 S255                                                # Turns on the PT-fan
        # Conditional check for nevermore pin
        {% if printer["output_pin nevermore"] is defined %}
            SET_PIN PIN=nevermore VALUE=1  # Turns on the Nevermore
        {% endif %}
        G1 X{x_wait} Y{y_wait} Z15 F9000                         # Go to the center of the bed
        M190 S{target_bed}                                       # Sets the target temp for the bed
        
        # Start chamber heating progress monitoring (modify just this section)
        M117 Monitoring chamber: {target_chamber}C                # Display chamber monitoring status
        # Conditional check for chamber thermistor
        {% if printer["temperature_sensor chamber"] is defined %}
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for the chamber to reach the desired temp
        {% else %}
            G4 P900000                                           # Wait 15 minutes for heatsoak
        {% endif %}

    # If the bed temp is not over 90c, then handle soak based on material
    {% else %}
        M117 Bed: {target_bed}C                                  # Display bed temperature
        STATUS_HEATING                                           # Sets SB-leds to heating-mode
        G1 X{x_wait} Y{y_wait} Z15 F9000                         # Go to center of the bed
        M190 S{target_bed}                                       # Sets the target temp for the bed
        
        # Material-based soak times with variant handling
        {% set raw_material = params.MATERIAL|default("PLA")|string|upper %}
        
        # Extract base material type by handling variants
        {% set material = namespace(type="") %}
        {% if "PLA" in raw_material %}
            {% set material.type = "PLA" %}
        {% elif "PETG" in raw_material %}
            {% set material.type = "PETG" %}
        {% elif "TPU" in raw_material or "TPE" in raw_material %}
            {% set material.type = "TPU" %}
        {% elif "PVA" in raw_material %}
            {% set material.type = "PVA" %}
        {% elif "HIPS" in raw_material %}
            {% set material.type = "HIPS" %}
        {% else %}
            {% set material.type = raw_material %}
        {% endif %}

        # Define soak times
        {% set soak_time = {
            "PLA": 180000,    # 3 minutes - Standard PLA soak time
            "PETG": 240000,   # 4 minutes - PETG needs slightly longer to stabilize
            "TPU": 180000,    # 3 minutes - TPU/TPE materials
            "PVA": 180000,    # 3 minutes - Support material, similar to PLA
            "HIPS": 240000    # 4 minutes - When used as support/primary under 90C
        }[material.type]|default(300000) %}                      # Default to 5 minutes if material not found
        
        M117 Soak: {soak_time/60000|int}min ({raw_material})     # Display soak time and material
        G4 P{soak_time}                                          # Execute soak timer
    {% endif %}
    
    # Check if GANTRY_LEVELING macro exists, use it if available
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        STATUS_LEVELING                                        # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...                                 # Display gantry leveling status
        GANTRY_LEVELING                                         # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
        {% if 'z_tilt' in printer %}
            STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                                    # Display Z-tilt adjustment
            Z_TILT_ADJUST                                     # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 QGL...                                       # Display QGL status
            QUAD_GANTRY_LEVEL                                 # Levels the gantry
        {% endif %}
    {% endif %}
    # Conditional check to ensure Z is homed after leveling procedures
    {% if 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
        M117 Z homing                                         # Display Z homing status
        G28 Z                                                 # Home Z if needed after leveling
    {% endif %}

    # Heating the nozzle to 150C. This helps with getting a correct Z-home
    STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
    M117 Hotend: 150C                                           # Display hotend temperature
    M109 S150                                                   # Heats the nozzle to 150C

    M117 Cleaning the nozzle...
    STATUS_CLEANING                                             # Sets SB-LEDs to cleaning-mode
    CLEAN_NOZZLE #EXTRUDER={target_extruder}                     # Clean nozzle before printing

    #M117 Nozzle cooling 150C...                                # Display wait message
    #STATUS_COOLING                                              # Sets SB-LEDs to cooling-mode
    #M109 S150                                                   # Heats the nozzle to 150C

    # M117 Hang tight...                                         # Display wait message
    # G4 P60000                                                   # Wait 1 min to stablize and cooldown the nozzle

    #STATUS_CALIBRATING_Z                                        # Sets SB-LEDs to z-calibration-mode
    #M117 Tappy Tap...                                           # Display tappy tap message
    #PROBE_EDDY_NG_TAP                                           # See: https://hackmd.io/yEF4CEntSHiFTj230CdD0Q

    SMART_PARK                                                  # Parks the toolhead near the beginning of the print

    # Uncomment for bed mesh (2 of 2)
    STATUS_MESHING                                              # Sets SB-LEDs to bed mesh-mode
    M117 Bed mesh                                               # Display bed mesh status
    BED_MESH_CALIBRATE ADAPTIVE=1 #Method=rapid_scan             # Starts bed mesh  Uncomment Method=rapid_scan for eddy rapid bed meshing

    M400                                                        # Wait for current moves to finish

    SMART_PARK                                                  # KAMP smart park

    # Heats up the nozzle to target via data from the slicer
    M117 Hotend: {target_extruder}C                             # Display target hotend temperature
    STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
    M107                                                        # Turns off part cooling fan
    M109 S{target_extruder}                                     # Heats the nozzle to printing temp
    
    # Gets ready to print by doing a purge line and updating the SB-LEDs
    M117 The purge...                                           # Display purge status
    STATUS_CLEANING                                             # Sets SB-LEDs to cleaning-mode
    LINE_PURGE                                                  # KAMP line purge

    M117 Printer goes brrr                                      # Display print starting
    
    STATUS_PRINTING                                             # Sets SB-LEDs to printing-mode

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 20) %}
      {% set z_safe = 20.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  STATUS_COOLING
  M400                                    # wait for buffer to clear
  G92 E0                                  # zero the extruder
  G1 E-4.0 F3600                         # retract
  G91                                     # relative positioning
  G0 Z{z_safe} F3600                     # move nozzle up
  M104 S0                                # turn off hotend
  M140 S0                                # turn off bed
  M106 S0                                # turn off fan
  M107                                    # turn off part cooling fan
  G90                                     # absolute positioning
  G1 X{min_x} Y{max_y} F2000             # move nozzle and present

  # Safe Z-drop if near maximum height (after parking)
  {% if printer.toolhead.position.z > (max_z - 20) %}
    G91                                   # relative positioning
    G1 Z-10 F1200                        # drop 10mm if near the top
    G90                                   # back to absolute
  {% endif %}

#  SET_DISPLAY_TEXT MSG="Scrubbing air..."          # Displays info
#  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore
#  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300
  SET_DISPLAY_TEXT MSG="Print finished!!"            # Displays info
  STATUS_PART_READY
  #PROBE_EDGY_NG_SET_TAP_OFFSET VALUE=0
  UPDATE_DELAYED_GCODE ID=set_ready_status DURATION=60
  UPDATE_DELAYED_GCODE ID=reset_printer_status DURATION=65
#  M84 # Disable motors  ##CURRENTLY DISABLED THIS TO ALLOW THE IDLE TIMEOUT TIMER DISABLE THE MOTORS - PLEASE MAKE SURE YOUR HAVE AN IDLE TIMEOUT TIMER SET - FLUIDD OR MAINSAIL HAVE THESE BY DEFAULT

[delayed_gcode reset_printer_status]
gcode:
    SDCARD_RESET_FILE

[delayed_gcode turn_off_nevermore]
gcode:
  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore

[delayed_gcode set_ready_status]
gcode:
  STATUS_READY

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(150))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
            STATUS_HOMING
            G28 Z
        {% endif %}
    {% else %}
        # Only home Z if we didn't just perform QGL or Z-tilt
        STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X2 Y237 Z15 F7800                      # Move to safe position above cleaning area
    
    STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %s°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                       # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X2 Y237 F7800                          # Move to start position
    G1 Z12 F600                               # Lower to cleaning height
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes
        G1 Y237 X5 F7800                      # Forward wipe
        G1 Y237 X35 F7800                     # Backward wipe
        
        # Zigzag pattern
        G1 Y238 X5 F7800                      # Diagonal forward
        G1 Y237 X19 F7800                     # Middle point
        G1 Y240 X35 F7800                     # Diagonal back
        
        # Constant pressure cleaning
        G1 Y238 X5 F7800                      # Forward wipe
        G1 Y240 X35 F7800                     # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y240 X35 F7800                         # Move away from cleaning area
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F600                               # Raise nozzle
    G90                                       # Absolute positioning
    STATUS_HOMING
    G28 Z                                     # Home Z
    
    STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}

    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

    #M84                                      # Disable steppers

[gcode_macro SET_FILAMENT_TYPE]
gcode:
    {% set filament_type = params.FILAMENT_TYPE|default("PLA") %}
    {% set extruder_temp = 0 %}
    
    {% if filament_type == "PLA" %}
        {% set extruder_temp = 200 %}
    {% elif filament_type == "ABS" %}
        {% set extruder_temp = 240 %}
    {% elif filament_type == "PETG" %}
        {% set extruder_temp = 250 %}
    {% elif filament_type == "TPU" %}
        {% set extruder_temp = 230 %}
    {% else %}
        M117 "Filament type not recognized, using default PLA"  # Default warning message
        {% set extruder_temp = 200 %}
    {% endif %}

    # Display the filament type and corresponding temperature
    M117 "Filament: {filament_type}, Temp: {extruder_temp}C"
    M104 S{extruder_temp}  # Set the extruder temperature
    M109 S{extruder_temp}  # Wait for the extruder to reach the set temperature
    M117 "Extruder ready at {extruder_temp}C"

[gcode_macro LOAD_FILAMENT]
variable_load_distance: 50
variable_purge_distance: 25
gcode:
    # Filament loading feedback
    M117 "Loading filament..."  # Show message on display
    G91  # Set relative positioning
    G92 E0  # Reset extruder position
    G1 E{variable_load_distance} F300  # Fast load the filament
    G1 E{variable_purge_distance} F100  # Purge the filament to ensure flow
    M117 "Filament loaded"  # Confirm filament load
    G90  # Set absolute positioning
    M117 "Ready to Print!"  # Print-ready message

[gcode_macro CHECK_FILAMENT_SENSOR]
gcode:
    M117 "Checking filament sensor..."  # Display message
    G4 P1000  # Wait for 1 second
    {% set sensor_state = printer["filament_sensor"].is_triggered %}
    
    {% if not sensor_state %}
        M117 "No filament detected, please insert filament"  # Feedback message
        G4 P2000  # Wait for 2 seconds before checking again
    {% else %}
        M117 "Filament detected, loading..."  # Proceed with loading
    {% endif %}

[gcode_macro SHOW_GIF]
description: Display a GIF without echo prefix
gcode:
    RESPOND TYPE=command MSG='<img src="https://media.tenor.com/hRiPtsp-m0IAAAAC/the-simpsons-homer-simpson.gif" width="400">'

[gcode_macro TEMP_WARNING]
description: Show temperature warning with styling
gcode:
    RESPOND MSG='<div style="background-color:#f8d7da; color:#721c24; padding:10px; border-radius:5px; font-weight:bold;">⚠️ HIGH TEMPERATURE ALERT: Hotend temperature exceeding safe idle limits!</div>'

[gcode_macro VERIFY_ACCELEROMETERS]
description: Check if accelerometers are responding and display current values
variable_accel_status: False
gcode:
    # Reset status variable
    SET_GCODE_VARIABLE MACRO=VERIFY_ACCELEROMETERS VARIABLE=accel_status VALUE=False
    
    # Try running accelerometer query in a try-except block to handle errors
    {% set ns = namespace(success = false) %}
    
    # Check for standard accelerometer config
    {% if printer.configfile.config.adxl345 is defined %}
        M118 Testing primary accelerometer...
        ACCELEROMETER_QUERY
        M118 Accelerometer OK
        {% set ns.success = true %}
    {% endif %}
    
    # Check for any named accelerometers
    {% for section in printer.configfile.config %}
        {% if section.startswith('adxl345 ') %}
            {% set chip = section.split(' ')[1] %}
            M118 Testing {chip} accelerometer...
            ACCELEROMETER_QUERY CHIP={chip}
            M118 {chip} accelerometer OK
            {% set ns.success = true %}
        {% endif %}
    {% endfor %}
    
    # Set final status
    {% if ns.success %}
        SET_GCODE_VARIABLE MACRO=VERIFY_ACCELEROMETERS VARIABLE=accel_status VALUE=True
        M118 Accelerometer check passed!
    {% else %}
        # Fallback - try direct query as a last resort
        M118 No accelerometer config detected, trying direct query...
        ACCELEROMETER_QUERY
        M118 Accelerometer check passed!
        SET_GCODE_VARIABLE MACRO=VERIFY_ACCELEROMETERS VARIABLE=accel_status VALUE=True
    {% endif %}

[gcode_macro GANTRY_LEVELING]
description: Enhanced Gantry Leveling with automatic detection of QGL or Z-Tilt
gcode:
    SAVE_GCODE_STATE NAME=STATE_TRAM
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        M117 Homing all axes first
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        M117 Homing Z axis
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Check if QGL or Z_TILT is available
    {% if 'quad_gantry_level' in printer %}
        # Only proceed with QGL if it hasn't been applied
        {% if not printer.quad_gantry_level.applied %}
            STATUS_LEVELING
            M117 Performing Quad Gantry Level
            
            # First pass - Coarse adjustment
            # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
            QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1
            
            # Second pass - Fine adjustment
            QUAD_GANTRY_LEVEL horizontal_move_z=2
            
            # Home Z after leveling
            STATUS_HOMING
            M117 Re-homing Z after QGL
            G28 Z
        {% else %}
            M117 QGL already applied
        {% endif %}
    
    {% elif 'z_tilt' in printer %}
        M117 Performing Z-Tilt Adjustment
        
        # First pass with retry tolerance
        Z_TILT_ADJUST horizontal_move_z=5 #RETRY_TOLERANCE=1
        
        # Second pass for fine adjustment
        #Z_TILT_ADJUST horizontal_move_z=2
        
        # Home Z after leveling
        STATUS_HOMING
        M117 Re-homing Z after Z-Tilt
        G28 Z
    
    {% else %}
        M117 No QGL or Z-Tilt available - Use SCREWS_TILT_CALCULATE
        RESPOND TYPE=error MSG="Neither Quad Gantry Level nor Z-Tilt configurations found"
        RESPOND TYPE=command MSG="Try running: SCREWS_TILT_CALCULATE"
    {% endif %}
    
    M117 Gantry Calibration Complete
    RESTORE_GCODE_STATE NAME=STATE_TRAM MOVE=0

    STATUS_READY

[gcode_macro SHAPER_CALIBRATE]
rename_existing: BASE_SHAPER_CALIBRATE
description: Input Shaper auto-calibration with conditional accelerometer verification
gcode:
    # STATUS_HOMING                         # STATUS: Display homing status
    
    # Conditional homing sequence (for all cases)
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                              # Home Z if only Z is unhomed
    {% endif %}
    
    # Gantry leveling after homing (for all cases)
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        # STATUS_LEVELING                   # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...            # Display gantry leveling status
        GANTRY_LEVELING                    # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        {% if 'z_tilt' in printer %}
            # STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                 # Display Z-tilt adjustment
            Z_TILT_ADJUST                  # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            # STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 QGL...                    # Display QGL status
            QUAD_GANTRY_LEVEL              # Levels the gantry
        {% endif %}
    {% endif %}
    
    # Now check if ADXL345 is configured in Klipper
    {% if 'adxl345' in printer.configfile.config %}
        # ADXL is configured, proceed with verification
        M117 Checking accelerometers
        VERIFY_ACCELEROMETERS
        
        # Check if accelerometers passed verification
        {% if printer["gcode_macro VERIFY_ACCELEROMETERS"].accel_status %}
            # Accelerometers are good, proceed with calibration
            # STATUS_CALIBRATING_Z          # STATUS: Show calibration in progress
            M117 Accelerometers OK, proceeding
            
            # Run shaper calibration
            # STATUS_LEVELING               # STATUS: Show leveling status during calibration
            M117 Running X-axis calibration
            BASE_SHAPER_CALIBRATE AXIS=x
            M117 Running Y-axis calibration
            BASE_SHAPER_CALIBRATE AXIS=y
            
            # STATUS_READY                  # STATUS: Return to ready state
            M117 Calibration complete
        {% else %}
            # Accelerometer check failed
            # STATUS_BUSY                   # STATUS: Using same status as beginning
            M117 Accelerometer check failed!
            M118 Calibration aborted: accelerometer error
            RESPOND TYPE=error MSG="Accelerometer check failed. Calibration aborted."
            RESPOND MSG="Check connections to ADXL345 sensors."
        {% endif %}
    {% else %}
        # No ADXL configured, proceed without verification
        M117 No ADXL configured, proceeding
        RESPOND MSG="No ADXL345 accelerometer configured, proceeding with standard calibration"
        
        # Run standard shaper calibration
        M117 Running X-axis calibration
        BASE_SHAPER_CALIBRATE AXIS=x
        M117 Running Y-axis calibration
        BASE_SHAPER_CALIBRATE AXIS=y
        
        # STATUS_READY                      # STATUS: Return to ready state
        M117 Calibration complete
    {% endif %}

[gcode_shell_command process_shaper_results]
command: ssh remote_host "~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png && echo 'X-axis recommendations:' && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -r && echo 'Y-axis recommendations:' && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -r"
timeout: 60.0

[gcode_macro INPUT_SHAPER]
description: Input Shaper resonance testing with conditional accelerometer verification and result processing
gcode:
    # STATUS_HOMING                         # STATUS: Display homing status
    
    # Conditional homing sequence (for all cases)
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                              # Home Z if only Z is unhomed
    {% endif %}
    
    # Gantry leveling after homing (for all cases)
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        # STATUS_LEVELING                   # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...            # Display gantry leveling status
        GANTRY_LEVELING                    # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        {% if 'z_tilt' in printer %}
            # STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                 # Display Z-tilt adjustment
            Z_TILT_ADJUST                  # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            # STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 QGL...                    # Display QGL status
            QUAD_GANTRY_LEVEL              # Levels the gantry
        {% endif %}
    {% endif %}
    
    # Now check if ADXL345 is configured in Klipper
    {% if 'adxl345' in printer.configfile.config %}
        # ADXL is configured, proceed with verification
        M117 Checking accelerometers
        VERIFY_ACCELEROMETERS
        
        # Check if accelerometers passed verification
        {% if printer["gcode_macro VERIFY_ACCELEROMETERS"].accel_status %}
            # Accelerometers are good, proceed with testing
            # STATUS_CALIBRATING_Z          # STATUS: Show calibration in progress
            M117 Accelerometers OK, proceeding
            
            # Perform resonance testing for each axis
            # STATUS_LEVELING               # STATUS: Show leveling status during testing
            M117 Testing X-axis resonances
            TEST_RESONANCES AXIS=X
            M117 Testing Y-axis resonances
            TEST_RESONANCES AXIS=Y
            
            # Process results via SSH and display recommendations
            # STATUS_BUSY                   # STATUS: Show busy status during processing
            M117 Processing results...
            RESPOND MSG="Processing input shaper data and generating recommendations..."
            RUN_SHELL_COMMAND CMD=process_shaper_results
            
            # Provide information about result locations
            M118 Raw results saved to /tmp/resonances_x_*.csv and /tmp/resonances_y_*.csv
            M118 Graphs saved to /tmp/shaper_calibrate_x.png and /tmp/shaper_calibrate_y.png
            
            # STATUS_READY                  # STATUS: Return to ready state
            M117 Resonance testing complete
        {% else %}
            # Accelerometer check failed
            # STATUS_BUSY                   # STATUS: Using same status as beginning
            M117 Accelerometer check failed!
            M118 Resonance testing aborted: accelerometer error
            RESPOND TYPE=error MSG="Accelerometer check failed. Testing aborted."
            RESPOND MSG="Check connections to ADXL345 sensors."
        {% endif %}
    {% else %}
        # No ADXL configured, cannot proceed with input shaper testing
        M117 No ADXL configured, cannot proceed
        M118 Input shaper testing requires ADXL345 accelerometer
        RESPOND TYPE=error MSG="No ADXL345 accelerometer configured. Testing aborted."
        RESPOND MSG="Input shaper testing requires accelerometer sensors."
    {% endif %}