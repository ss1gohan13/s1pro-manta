[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "STATUS_BUSY"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro G29]				
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28                      # Full home (XYZ)
  {% endif %}
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z   
  BED_MESH_CALIBRATE ADAPTIVE=1
  G28 Z

#[gcode_macro START_PRINT]
#gcode:
#  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
#  {% set target_bed = params.BED|int %}
#  {% set target_extruder = params.EXTRUDER|int %}
#  {% set target_chamber = params.CHAMBER|default("40")|int %}
#  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
#  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
##
#  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
#    STATUS_HOMING
#    {% if printer.toolhead.homed_axes != "xyz" %}
#        G28                      # Full home (XYZ)
#        {% else %}
#          G28 Z
#    {% endif %}
#    G90
##
#    M400
##
#    CLEAR_PAUSE
##
#  ##  Uncomment for bed mesh (1 of 2)
#  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
##
#  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
#  {% if params.BED|int > 90 %}
#    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
#    STATUS_HEATING                                      # Sets SB-leds to heating-mode
#    M106 S150                                           # Turns on the PT-fan
##
#    #  Uncomment if you have a Nevermore.
#    #SET_PIN PIN=!PC13 VALUE=1                      # Turns on the nevermore
#    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore
#    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
#    M190 S{target_bed}                                  # Sets the target temp for the bed
#    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
#    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
##
#  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
#  {% else %}
#    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
#    STATUS_HEATING                                      # Sets SB-leds to heating-mode
#    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
#    M190 S{target_bed}                                  # Sets the target temp for the bed
#    SET_DISPLAY_TEXT MSG="Soak for 5 min"                # Displays info
#    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
#  {% endif %}
##
#  ##  Uncomment for Trident (Z_TILT_ADJUST)
#  STATUS_LEVELING
#  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
#  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
#  G28 Z                                    # Homes Z again after z_tilt_adjust
##
#  SMART_PARK
##
#  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
#  STATUS_HEATING
#  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
#  M109 S150                                    # Heats the nozzle to 150c
##
#  CLEAN_NOZZLE
##
#  STATUS_HOMING
##
#  G28 Z
##
#  STATUS_MESHING
##
#  ##  Uncomment for bed mesh (2 of 2)
#  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
#  BED_MESH_CALIBRATE ADAPTIVE=1                # Starts bed mesh
##
#  SMART_PARK
##
#  # Heats up the nozzle up to target via data from slicer
#  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
#  STATUS_HEATING                                                # Sets SB-leds to heating-mode
#  M107                                                          # Turns off partcooling fan
#  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
##
#  # Gets ready to print by doing a purge line and updating the SB-leds
#  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
#  STATUS_CLEANING
#  LINE_PURGE
#  STATUS_PRINTING

#####################################################################
#   A better start_print macro
#####################################################################

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %} # Can be commented out if needed
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
  STATUS_HOMING         # Sets SB-LEDs to homing-mode

  {% if printer.toolhead.homed_axes != "xyz" %}
    G28                      # Full home (XYZ)
  {% else %}
    G28 Z
  {% endif %}
                
  G90

  M400

  CLEAR_PAUSE

  # Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-LEDs to heating-mode
    M106 S255                                           # Turns on the PT-fan
    # Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the Nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to the center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for the chamber to reach the desired temp

 # If the bed temp is not over 90c, then handle soak based on material
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    
    # Material-based soak times with variant handling
    {% set raw_material = params.MATERIAL|default("PLA")|string|upper %}
    
    # Extract base material type by handling variants
    {% set material = namespace(type="") %}
    {% if "PLA" in raw_material %}
        {% set material.type = "PLA" %}
    {% elif "PETG" in raw_material %}
        {% set material.type = "PETG" %}
    {% elif "TPU" in raw_material or "TPE" in raw_material %}
        {% set material.type = "TPU" %}
    {% elif "PVA" in raw_material %}
        {% set material.type = "PVA" %}
    {% elif "HIPS" in raw_material %}
        {% set material.type = "HIPS" %}
    {% else %}
        {% set material.type = raw_material %}
    {% endif %}

    # Define soak times
    {% set soak_time = {
        "PLA": 180000,    # 3 minutes - Standard PLA soak time
        "PETG": 240000,   # 4 minutes - PETG needs slightly longer to stabilize
        "TPU": 180000,    # 3 minutes - TPU/TPE materials
        "PVA": 180000,    # 3 minutes - Support material, similar to PLA
        "HIPS": 240000    # 4 minutes - When used as support/primary under 90C
    }[material.type]|default(300000) %}    # Default to 5 minutes if material not found
    
    SET_DISPLAY_TEXT MSG="Soak: {soak_time/60000|int}min ({raw_material})"
    G4 P{soak_time}
  {% endif %}

     # Comment out for Trident (Z_TILT_ADJUST)
   {% set z_tilt_was_applied = printer['z_tilt'].applied %}    # Store initial Z-TILT state
   {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
     STATUS_LEVELING                                            # Sets SB-LEDs to leveling-mode
     SET_DISPLAY_TEXT MSG="Z-tilt adjust"                       # Displays info
     Z_TILT_ADJUST                                              # Levels the buildplate via z_tilt_adjust
     # Only home Z if it hasn't been done by Z_TILT and isn't already homed
     {% if 'z' not in printer.toolhead.homed_axes %}
         STATUS_HOMING                                          # Sets SB-LEDs to homing-mode
         G28 Z                                                  # Home Z only if needed
     {% endif %}
   {% endif %}

  ## Comment out for Voron (QUAD_GANTRY_LEVEL)
  # {% if not printer.quad_gantry_level.applied %}
  #   STATUS_LEVELING                                             # Sets SB-LEDs to leveling-mode
  #   SET_DISPLAY_TEXT MSG="QGL"                                  # Displays info
  #   QUAD_GANTRY_LEVEL                                           # Levels the gantry (includes G28 Z)
  # {% else %}
  #   # Only home Z if it hasn't been done by QGL and isn't already homed
  #    {% if 'z' not in printer.toolhead.homed_axes %}
  #        STATUS_HOMING                                           # Sets SB-LEDs to homing-mode
  #        G28 Z                                                   # Home Z only if needed
  #    {% endif %}
  # {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  STATUS_HEATING
  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  STATUS_CLEANING
  CLEAN_NOZZLE EXTRUDER={target_extruder}     # Pass the actual print temperature for cleaning

  #  Uncomment for bed mesh (2 of 2)
  STATUS_MESHING
  SET_DISPLAY_TEXT MSG="Bed mesh"                               # Displays info
  #BED_MESH_CALIBRATE METHOD=RAPID_SCAN ADAPTIVE=1               # Starts bed mesh for eddy
  BED_MESH_CALIBRATE ADAPTIVE=1                                 # Starts bed mesh

  M400

  SMART_PARK

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-LEDs
  SET_DISPLAY_TEXT MSG="The purge..."                           # Displays info
  STATUS_CLEANING                                               # Sets SB-LEDs to cleaning-mode
  LINE_PURGE

  SET_DISPLAY_TEXT MSG="Printer goes brrr"                      # Displays info
  
  STATUS_PRINTING                                               # Sets SB-LEDs to printing-mode

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set min_x = printer.configfile.config["stepper_x"]["position_endstop"]|float %}

  #Check end position to determine safe directions to move
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
    {% else %}
      {% set x_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
    {% else %}
      {% set y_safe = -20.0 %}
    {% endif %}

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  STATUS_COOLING
  M400                                    # wait for buffer to clear
  G92 E0                                  # zero the extruder
  G1 E-4.0 F3600                         # retract
  G91                                     # relative positioning
  G0 Z{z_safe} F3600                     # move nozzle up
  M104 S0                                # turn off hotend
  M140 S0                                # turn off bed
  M106 S0                                # turn off fan
  M107                                    # turn off part cooling fan
  G90                                     # absolute positioning
  G1 X{min_x} Y{max_y} F2000             # move nozzle and present

  # Safe Z-drop if near maximum height (after parking)
  {% if printer.toolhead.position.z > (max_z - 20) %}
    G91                                   # relative positioning
    G1 Z-10 F1200                        # drop 10mm if near the top
    G90                                   # back to absolute
  {% endif %}

#  SET_DISPLAY_TEXT MSG="Scrubbing air..."          # Displays info
#  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore
#  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300
  SET_DISPLAY_TEXT MSG="Print finished!!"            # Displays info
  STATUS_PART_READY
  PROBE_EDGY_NG_SET_TAP_OFFSET VALUE=0
  UPDATE_DELAYED_GCODE ID=set_ready_status DURATION=60
  UPDATE_DELAYED_GCODE ID=reset_printer_status DURATION=65
#  M84 # Disable motors  ##CURRENTLY DISABLED THIS TO ALLOW THE IDLE TIMEOUT TIMER DISABLE THE MOTORS - PLEASE MAKE SURE YOUR HAVE AN IDLE TIMEOUT TIMER SET - FLUIDD OR MAINSAIL HAVE THESE BY DEFAULT

[delayed_gcode reset_printer_status]
gcode:
    SDCARD_RESET_FILE

[delayed_gcode turn_off_nevermore]
gcode:
  SET_PIN PIN=nevermore VALUE=0                      # Turns off the nevermore

[delayed_gcode set_ready_status]
gcode:
  STATUS_READY

#[gcode_macro _CLEAN_NOZZLE]
#gcode:
#    {% if printer.toolhead.homed_axes != "xyz" %}
#       G28
#    {% endif %}
#    G90 
#    G1 X-5 Y30 F7800
#    STATUS_HEATING
#    M117 Nozzle heating...
#    M109 S200
#    G91
#    G90
#    M106 S127
#    STATUS_CLEANING
#    M117 Clean nozzle
#    G1 X-5 Y30 F7800
#    G1 Z0.5 F600
#    G1 Y1 F7800
#    {% for wipes in range(5) %}
#        G1 Y30 X-5
#        G1 Y1 X-5
#    {% endfor %}
#    G1 Z5
#    G1 Z0.5
#    {% for wipes in range(5) %}
#        G1 Y30 X-3
#        G1 Y15 X-4
#        G1 Y1 X-5
#        G1 Y30 X-5
#        G1 Y15 X-4
#        G1 Y1 X-3
#    {% endfor %}
#    G1 Y50 X-5

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(200))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Check if printer needs homing
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                     # Full home if not fully homed
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
        {% endif %}
        
        # Only home Z if we actually performed a leveling operation
        STATUS_HOMING
        G28 Z                                  # Home Z again after leveling
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X-5 Y30 F7800                          # Move to cleaning position
    
    STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %s°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                       # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X-5 Y30 F7800                          # Move to start position
    G1 Z1 F600                                # Lower to cleaning height
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes
        G1 Y30 X-5 F7800                      # Forward wipe
        G1 Y1 X-5 F7800                       # Backward wipe
        
        # Zigzag pattern
        G1 Y30 X-3 F7800                      # Diagonal forward
        G1 Y15 X-4 F7800                      # Middle point
        G1 Y1 X-5 F7800                       # Diagonal back
        
        # Constant pressure cleaning
        G1 Y30 X-5 F7800                      # Forward wipe
        G1 Y1 X-3 F7800                       # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y50 X-5 F7800                          # Move away from cleaning area
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F600                               # Raise nozzle
    G90                                       # Absolute positioning
    G28 Z                                     # Home Z
    
    STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    #M84                                      # Disable steppers

[gcode_macro SET_FILAMENT_TYPE]
gcode:
    {% set filament_type = params.FILAMENT_TYPE|default("PLA") %}
    {% set extruder_temp = 0 %}
    
    {% if filament_type == "PLA" %}
        {% set extruder_temp = 200 %}
    {% elif filament_type == "ABS" %}
        {% set extruder_temp = 240 %}
    {% elif filament_type == "PETG" %}
        {% set extruder_temp = 250 %}
    {% elif filament_type == "TPU" %}
        {% set extruder_temp = 230 %}
    {% else %}
        M117 "Filament type not recognized, using default PLA"  # Default warning message
        {% set extruder_temp = 200 %}
    {% endif %}

    # Display the filament type and corresponding temperature
    M117 "Filament: {filament_type}, Temp: {extruder_temp}C"
    M104 S{extruder_temp}  # Set the extruder temperature
    M109 S{extruder_temp}  # Wait for the extruder to reach the set temperature
    M117 "Extruder ready at {extruder_temp}C"

[gcode_macro LOAD_FILAMENT]
variable_load_distance: 50
variable_purge_distance: 25
gcode:
    # Filament loading feedback
    M117 "Loading filament..."  # Show message on display
    G91  # Set relative positioning
    G92 E0  # Reset extruder position
    G1 E{variable_load_distance} F300  # Fast load the filament
    G1 E{variable_purge_distance} F100  # Purge the filament to ensure flow
    M117 "Filament loaded"  # Confirm filament load
    G90  # Set absolute positioning
    M117 "Ready to Print!"  # Print-ready message

[gcode_macro CHECK_FILAMENT_SENSOR]
gcode:
    M117 "Checking filament sensor..."  # Display message
    G4 P1000  # Wait for 1 second
    {% set sensor_state = printer["filament_sensor"].is_triggered %}
    
    {% if not sensor_state %}
        M117 "No filament detected, please insert filament"  # Feedback message
        G4 P2000  # Wait for 2 seconds before checking again
    {% else %}
        M117 "Filament detected, loading..."  # Proceed with loading
    {% endif %}
